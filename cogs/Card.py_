import discord
from discord.ext import commands

from discord_components import Button, Interaction, ButtonStyle

from hdb import Card, User, RarityData, Rarity, VtuberEntry

class CardGame(commands.Cog):
  def __init__(self, bot):
    self.bot: commands.Bot = bot
    self.PAGE_SIZE = 10

  async def create_embed(self, title: str, card: Card):
    vtuber = card.vtuber.copy()
    embed = discord.Embed(
      title=title.format(name=vtuber.name, en_name=vtuber.english_name),
      description=("".join([
        f"Name: {vtuber.name}\n",
        f"Organization: {vtuber.org}\n"
        f"Rarity: {card.rarity_data.name.lower()}\n",
        f"Sub Count: {vtuber.sub_count}\n",
        f"Card ID: {card.card_id}\n",
        f"Cost: {round(card.cost, 2)}"
      ])),
      color=self.bot.color
    )

    if vtuber.photo is not None:
      embed.set_image(url=vtuber.photo)

    return embed


  @commands.group(
    name="card"
  )
  async def card(self, ctx: commands.Context):
    pass

  @card.command()
  async def collect(self, ctx: commands.Context):
    user = User(ctx.author.id)
    new_card = Card.create(ctx.author.id, VtuberEntry.random().id, RarityData.random().value)
    card = Card(new_card)

    embed = await self.create_embed(
      title="Vtuber Found: {name}",
      card=card
    )

    await ctx.send(
      embed=embed
    )

  @card.command()
  async def inv(self, ctx: commands.Context, page=0):
    user = User(ctx.author.id)
    _max = min(len(user.cards), self.PAGE_SIZE)
    cards: list[Card] = []
    for i in range(page * _max, page * _max + _max):
      cards.append(Card.from_card_id(user.cards[i]))

    desc = ""

    for idx, (card) in enumerate(cards):
      vtuber = card.vtuber.copy()
      desc += f"`{card.card_id}`|: [{card.rarity_data.name.lower()}] **{vtuber.name}**({vtuber.english_name})\n"


    embed = discord.Embed(
      title=f"Inv Page: {page}",
      description=desc,
      color=self.bot.color
    )

    await ctx.send(
      embed=embed
    )

  @card.command()
  async def view(self, ctx: commands.Context, card_id: int):
    user = User(ctx.author.id)
    card = user.get_card(card_id)
    if card.owner != ctx.author.id:
      await ctx.send(content="You dont own this card")
    else:
      embed = await self.create_embed(
        title="Vtuber Card: {name}",
        card=card
      )

      await ctx.send(
        embed=embed
      )

  @card.command()
  async def sell(self, ctx: commands.Context, card_id: int):
    user = User(ctx.author.id)
    if len(user.cards) == 0:
      await ctx.send("You dont have any cards")
    else:
      res = user.sell_card(card_id)
      if res == 0:
        await ctx.send("You Don't own this card")
      elif res == 1:
        await ctx.send("Card With ID doesn't exist")
      else:
        vtuber = res.vtuber.copy()

        embed = discord.Embed(
          title="Card Sold",
          description=("".join([
            f"Name: {vtuber.name}\n",
            f"Organization: {vtuber.org}\n"
            f"Rarity: {res.rarity_data.name.lower()}\n",
            f"Sub Count: {vtuber.sub_count}\n",
            f"Card ID: {card_id}",
            f"\n\nGained {round(float(res.cost), 2)} vcoins"
          ])),
          color=self.bot.color
        )
        await ctx.send(embed=embed)

  @card.command(
    name="balance",
    aliases=["bal"]
  )
  async def bal(self, ctx: commands.Context):
    user = User(ctx.author.id)

    await ctx.send(
      reference=ctx.message,
      embed=discord.Embed(
        title="Balance",
        description=f"Your Balance is {round(user.bal, 2)} vcoins",
        color=self.bot.color
      )
    )


def setup(bot):
  bot.add_cog(CardGame(bot))
